// Copyright Â© 2021 The Things Industries B.V.
// SPDX-License-Identifier: Apache-2.0

package gen

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// Version is the version of the generator.
var Version = "0.0.0-dev"

// Params are the parameters for the generator.
var Params struct {
	Lang string

	CustomTypeGetterPrefix string
	CustomTypeGetterSuffix string
}

const (
	pflagPackage = protogen.GoImportPath("github.com/spf13/pflag")

	flagspluginPackage  = protogen.GoImportPath("github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin")
	gogoPluginPackage   = protogen.GoImportPath("github.com/TheThingsIndustries/protoc-gen-go-flags/gogo")
	golangPluginPackage = protogen.GoImportPath("github.com/TheThingsIndustries/protoc-gen-go-flags/golang")
)

type generator struct {
	gen  *protogen.Plugin
	file *protogen.File
	*protogen.GeneratedFile
}

var flagNameReplacer = strings.NewReplacer("_", "-")

// GenerateFile generates a file with JSON marshalers and unmarshalers.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	g := &generator{
		gen:  gen,
		file: file,
	}

	// If the file doesn't have marshalers or unmarshalers, we kan skip it.
	if !g.fileHasAnyFlags() {
		return nil
	}

	// Generate a new file that ends with `_flags.pb.go`.
	filename := file.GeneratedFilenamePrefix + "_flags.pb.go"
	g.GeneratedFile = gen.NewGeneratedFile(filename, file.GoImportPath)

	// The standard header for generated files.
	g.P("// Code generated by protoc-gen-go-flags. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-flags v", Version)
	g.P("// - protoc              ", g.protocVersion())
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}

	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	g.generateFileContent()

	return g.GeneratedFile
}

func (g *generator) fileHasAnyFlags() bool {
	for _, message := range g.file.Messages {
		if g.messageHasAnyFlags(message) {
			return true
		}
	}
	return false
}

func (g *generator) protocVersion() string {
	v := g.gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func (g *generator) generateFileContent() {
	for _, message := range g.file.Messages {
		g.genMessage(message)
	}
}
